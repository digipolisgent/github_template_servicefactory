parameters:
- name: README
  description: These parameters are useful to quickly change some metadata. However there are still things you MUST change in the template, like resource limits and container specs (environment)!
  value: FIRST
- name: NAME
  description: This is the component name which will be also visible in Openshift. Add a suffix like -api, -worker, -sync, -datafetch, ...
  value: test-api
- name: APP
  description: This is the application name of which the component is part of. For exemple the email-api is part of the notification application. 
  value: application-test
- name: NAMESPACE
  description: This is the namespace where the component will be deployed. The namespace correspondents with the business domain where the component or application is part of. The environment suffixes dv, qa or pr are allready provided where needed in the template.
  value: technical
- name: GITURI
  description: Git URI of the source code used for s2i builds
  value: git@github.com:digipolisgent/java_service_email.git
- name: ARTIFACT_DIR
  description: Remove DOTNET_STARTUP_PROJECT when using this! The relative path to the target where JAR files are created for multi-module builds.
  value: src/target
- name: IMAGE_TAG
  description: Tag of the image
  value: "qa_approved"
- name: DOTNET_STARTUP_PROJECT
  description: Remove ARTIFACT_DIR when using this! Used to select the project to run. This must be the folder in the source repository containing the project file.
  value: path/to/startup.csproj
- name: BUILDER_IMAGE
  description: s2i builder image used for the Openshift build process. Choose one from the list or ask the Service Factory for other possibilities. 
  value: openjdk18-openshift|dotnet-21-rhel7 (deprecated)|dotnet-31-rhel7|nodejs-10|nginx-114|...
- name: APM_SERVICE_NAME
  description: The Elastic APM service name should be written in full and contain the environment. 
  value: Servicename API ST | Servicename WORKER ST | Servicename DATAFETCH ST | ...
apiVersion: v1
kind: Template
metadata:
  name: ${NAME}
objects:
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: ${NAME}
    namespace: ${NAMESPACE}st
    labels:
      app: ${APP}
      component: ${NAME}
  spec:
    replicas: 1
    selector:
      app: ${APP}
      component: ${NAME}
    strategy:
      activeDeadlineSeconds: 660
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        name: ${NAME}
        namespace: ${NAMESPACE}st
        labels:
          app: ${APP}
          component: ${NAME}
      spec:
        containers:
        - env:
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${NAME}-secrets
                key: DB_PASSWORD
          - name: DB_USER
            valueFrom: 
              secretKeyRef:
                name: ${NAME}-secrets
                key: DB_USER
          - name: AMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${NAME}-secrets
                key: AMQ_PASSWORD
          - name: AMQ_USER
            valueFrom:
              secretKeyRef:
                name: ${NAME}-secrets
                key: AMQ_USER
          - name: AMQ_HOST
            value: ""
          - name: AMQ_POOL
            value: "true"
          - name: AMQ_QUEUE_PREFIX
            value: ${NAMESPACE}st.${APPLICATION}.v1.${NAME}.
          - name: AMQ_QUEUE_CREATION
            value: creation
          - name: AMQ_QUEUE_UPDATE
            value: update
          - name: AMQ_QUEUE_ARCHIVE
            value: archive
          - name: AMQ_QUEUE_COMPLETION
            value: completion
          - name: DB_HOST
            value: ""
          - name: SPRING_PROFILES_ACTIVE
            value: "production"
          - name: "APP_NAMESPACE_PREFIX"
            value: "${NAMESPACE}/${NAME}"
          - name: "APP_LOG_LEVEL"
            value: "INFO"
          - name: "APP_MOCKING"
            value: "FALSE"
          - name: APM_SECRET_TOKEN
            valueFrom:
              secretKeyRef:
                name: apm-secrets
                key: SECRETTOKEN
          - name: APM_SERVER_URL
            valueFrom:
              secretKeyRef:
                name: apm-secrets
                key: SERVERURL
          - name: APM_VERIFY_SERVER_CERT
            valueFrom:
              secretKeyRef:
                name: apm-secrets
                key: SERVERCERT
          - name: APM_CENTRAL_CONFIG
            valueFrom:
              secretKeyRef:
                name: apm-secrets
                key: CENTRALCONFIG
          - name: APM_SERVICE_NAME
            value: ${APM_SERVICE_NAME}
          - name: APM_ENVIRONMENT
            value: 'QA'
          image: docker-registry.default.svc:5000/${NAMESPACE}dv/${NAME}:${IMAGE_TAG}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 30
            httpGet:
              path: /${NAMESPACE}/${NAME}/v1/status/am-i-up
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /${NAMESPACE}/${NAME}/v1/status/aggregate
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: ${NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: 
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 25Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers: []
- apiVersion: v1
  kind: Service
  metadata:
    name: ${NAME}
    namespace: ${NAMESPACE}st
    labels:
      app: ${APP}
      component: ${NAME}
  spec:
    ports:
    - name: ${NAME}-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APP}
      component: ${NAME}
    sessionAffinity: None
    type: ClusterIP
